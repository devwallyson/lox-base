?start     : program

program    : declaration*

?declaration : var_def
             | fun_def
             | class_def
             | stmt

var_def    : "var" VAR "=" expr ";"  -> var_def_init
           | "var" VAR ";"           -> var_def_no_init

fun_def    : "fun" VAR "(" fun_params ")" block

class_def  : "class" VAR "<" VAR "{" class_body "}"  -> class_def_inherit
           | "class" VAR "{" class_body "}"           -> class_def_simple

class_body : method_def*
method_def : VAR "(" fun_params ")" block

fun_params : [ VAR ("," VAR )* ]

?stmt      : expr ";"
           | print_cmd
           | block
           | if_stmt
           | while_stmt
           | for_stmt
           | return_stmt

print_cmd  : "print" expr ";"
block      : "{" declaration* "}"
if_stmt    : "if" "(" expr ")" stmt ("else" stmt)?
while_stmt : "while" "(" expr ")" stmt
for_stmt   : "for" "(" for_init for_cond ";" for_incr ")" stmt
return_stmt: "return" expr? ";"
for_init   : var_def | expr ";" | ";"
for_cond   : expr?
for_incr   : expr?

?expr      : assignment

?assignment : call "." VAR "=" assignment -> setattr_call
            | getattr "=" assignment -> setattr_getattr
            | VAR "=" assignment -> assign
            | logic_or

?logic_or  : logic_or "or" logic_and  -> or_
           | logic_and

?logic_and : logic_and "and" test     -> and_
           | test

?test      : test "==" cmp  -> eq
           | test "!=" cmp  -> ne
           | cmp

?cmp       : cmp ">" factor   -> gt
           | cmp "<" factor   -> lt
           | cmp ">=" factor  -> ge
           | cmp "<=" factor  -> le
           | factor

?factor    : factor "+" term  -> add
           | factor "-" term  -> sub
           | term

?term      : term "*" unary   -> mul
           | term "/" unary   -> div 
           | unary

?unary     : "-" unary       -> neg
           | "!" unary       -> not_
           | atom

?atom      : primary
           | call
           | getattr

primary    : NUMBER 
           | BOOL
           | VAR
           | STRING
           | NIL
           | THIS
           | "super" "." VAR -> super_access
           | "(" expr ")"

getattr    : (primary | call) ("." VAR)+
call       : (primary | getattr | call) "(" params ")"

params     : [ expr ("," expr )* ]

BOOL.2     : "true" | "false"
THIS.2     : "this"
VAR.1      : /[a-zA-Z_]\w*/
NUMBER     : /([1-9][0-9]*|0)(\.[0-9]+)?/ 
STRING     : /"[^"]*"/
NIL.2      : "nil"
COMMENT    : "//" /[^\n]*/

%ignore /\s/ | COMMENT